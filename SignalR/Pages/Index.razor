@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<h1>Hello, world!</h1>

<ul>
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code
{
    private HubConnection? _hubConnection;
    private readonly List<string> _messages = new();


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5020/hub",
                o =>
                    o.AccessTokenProvider = () => Task.FromResult<string?>("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Im1pY2hhZWwiLCJzdWIiOiJtaWNoYWVsIiwianRpIjoiNDU5YTRhNWIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo5ODE4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMzAiLCJodHRwOi8vbG9jYWxob3N0OjUwMjAiLCJodHRwczovL2xvY2FsaG9zdDo3MDYwIl0sIm5iZiI6MTcwMTI1NjQ1OCwiZXhwIjoxNzA5MjA1MjU4LCJpYXQiOjE3MDEyNTY0NTksImlzcyI6ImRvdG5ldC11c2VyLWp3dHMifQ.hicdFo-n3e8gn9fOnr7BywowV2ANRjXRMvG-2hIVP4Y"))
            .Build();
        _hubConnection.On<string>("Receive", message =>
        {
            _messages.Add(message);
            InvokeAsync(StateHasChanged);
        });
        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
